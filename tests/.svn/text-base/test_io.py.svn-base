##############################################################################
#  The Combustion Flame Engine - pyflam3
#  http://combustion.sourceforge.net
#
#  Copyright (C) 2007 by Bobby R. Ward <bobbyrward@gmail.com>
#
#  The Combustion Flame Engine is free software; you can redistribute
#  it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation; either
#  version 3 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Library General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this library; see the file COPYING.LIB.  If not, write to
#  the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
#  Boston, MA 02111-1307, USA.
##############################################################################
from __future__ import with_statement
import unittest
import os
import warnings
from testing_util import print_test_name

import pyflam3
from pyflam3.constants import *

import flame_test_file

warnings.filterwarnings('ignore', 'tmpnam', RuntimeWarning, __name__)

class Flam3IOTestCase(unittest.TestCase):
    def setUp(self):
        temp_fname = os.tmpnam()
        fd = open(temp_fname, 'w')
        fd.write(flame_test_file.test_str)
        fd.close()
        self.flame_filename = temp_fname

    def tearDown(self):
        os.remove(self.flame_filename)

    @print_test_name
    def testToOpenFile(self):
        genomes = pyflam3.Genome.from_string(flame_test_file.test_str)
        with open('test.output-to_open_file.flam3', 'w') as fd:
            for genome in genomes:
                genome.to_file('', fd)

    @print_test_name
    def testToFile(self):
        genomes = pyflam3.Genome.from_string(flame_test_file.test_str)
        genomes[0].to_file('test.output-to_file.flam3')

    @print_test_name
    def testToFlam3File(self):
        genomes = pyflam3.Genome.from_string(flame_test_file.test_str)
        pyflam3.write_flam3_file('test.io.to_flam3_file.flam3', genomes)

    @print_test_name
    def testToString(self):
        genomes = pyflam3.Genome.from_string(flame_test_file.test_str)
        for genome in genomes:
            genome.to_string()

    @print_test_name
    def testFromString(self):
        genomes = pyflam3.Genome.from_string(flame_test_file.test_str)
        self.verify_genomes(genomes)

    @print_test_name
    def testFromFile(self):
        genomes = pyflam3.Genome.from_file(self.flame_filename)
        self.verify_genomes(genomes)

        genomes = pyflam3.Genome.from_file('share/test.flam3')
        self.verify_genomes(genomes)
        
    def verify_genome(self, genome, time, palette, hue):
        self.assertEqual(genome.time, time)
        self.assertEqual(genome.palette_index, palette)
        self.assertEqual(genome.size[0], 640)
        self.assertEqual(genome.size[1], 480)
        self.assertEqual(genome.center[0], 0)
        self.assertEqual(genome.center[1], 0)
        self.assertEqual(genome.pixels_per_unit, 240)
        self.assertEqual(genome.zoom, 0)
        self.assertEqual(genome.spatial_oversample, 1)
        self.assertEqual(genome.spatial_filter_radius, 1)
        self.assertEqual(genome.sample_density, 10)
        self.assertEqual(genome.background[0], 0)
        self.assertEqual(genome.background[1], 0)
        self.assertEqual(genome.background[2], 0)
        self.assertEqual(genome.brightness, 4)
        self.assertEqual(genome.gamma, 4)
        self.assertEqual(genome.vibrancy, 1)
        self.assertAlmostEqual(genome.hue_rotation, hue)

    def verify_xform(self, xform, weight, color, coefs):
        self.assertAlmostEqual(xform.density, weight)
        self.assertAlmostEqual(xform.color[0], color)
        self.assertEqual(xform.variations['spherical'], 1)

        for name, value in xform.variations:
            if name != 'spherical':
                self.assertEqual(value, 0, '%s = %f' % (name, value))

        for from_xform, to_compare in zip(xform.c, coefs):
            self.assertAlmostEqual(from_xform[0], to_compare[0])
            self.assertAlmostEqual(from_xform[1], to_compare[1])

    def verify_genomes(self, genomes):
        self.assertEqual(len(genomes), 2)
        self.verify_genome(genomes[0], 0, 15, 0.22851)

        self.verify_xform(genomes[0].xforms[0], 0.25, 1.0, 
                [ (-0.681206, -0.0779465), 
                  (0.20769, 0.755065), 
                  (-0.0416126, -0.262334)])

        self.verify_xform(genomes[0].xforms[1], 0.25, 0.66, 
                [ (0.953766, 0.48396),
                  (0.43268, -0.0542476),
                  (0.642503, -0.995898)])

        self.verify_xform(genomes[0].xforms[2], 0.25, 0.33, 
                [ (0.840613, -0.816191), 
                  (0.318971, -0.430402),
                  (0.905589, 0.909402)])

        self.verify_xform(genomes[0].xforms[3], 0.25, 0.0, 
                [ (0.960492, -0.466555), 
                  (0.215383, -0.727377),
                  (-0.126074, 0.253509)])

        self.verify_genome(genomes[1], 100, 29, 0.147038)
        self.verify_xform(genomes[1].xforms[0], 0.25, 1.0, 
                [ (-0.357523, 0.774667), 
                  (0.397446, 0.674359), 
                  (-0.730708, 0.812876) ])
        self.verify_xform(genomes[1].xforms[1], 0.25, 0.66, 
                [ (-0.69942, 0.141688),
                  (-0.743472, 0.475451), 
                  (-0.336206, 0.0958816) ])
        self.verify_xform(genomes[1].xforms[2], 0.25, 0.33, 
                [ (0.0738451, -0.349212),
                  (-0.635205, 0.262572), 
                  (-0.398985, -0.736904) ])
        self.verify_xform(genomes[1].xforms[3], 0.25, 0.0, 
                [ (0.992697, 0.433488),
                  (-0.427202, -0.339112), 
                  (-0.507145, 0.120765) ])



