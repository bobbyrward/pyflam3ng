##############################################################################
#  The Combustion Flame Engine - pyflam3
#  http://combustion.sourceforge.net
#
#  Copyright (C) 2007 by Bobby R. Ward <bobbyrward@gmail.com>
#
#  The Combustion Flame Engine is free software; you can redistribute
#  it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation; either
#  version 3 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Library General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this library; see the file COPYING.LIB.  If not, write to
#  the Free Software Foundation, Inc., 59 Temple Place - Suite 330,
#  Boston, MA 02111-1307, USA.
##############################################################################
import unittest
import pyflam3
from pyflam3.constants import *
from testing_util import print_test_name

class RandomTestCase(unittest.TestCase):
    @print_test_name
    def testRandomGenome(self):
        genome =  pyflam3.Genome.random()

    @print_test_name
    def testRandomGenomeVariationList(self):
        variations = ['linear', 'spherical', 'julia']
        genome = pyflam3.Genome.random(variations=variations)

        for xform in genome.xforms:
            vars = map(lambda x: x[0], filter(lambda x: x[1] != 0, xform.variations))
            for var in vars:
                self.assertTrue(var in variations, '%s in %s' % (var, str(variations)))

    def _testNumXForms(self, num_xforms):
        genome = pyflam3.Genome.random(num_xforms=num_xforms)
        self.assertEqual(num_xforms, len(genome.xforms))

    @print_test_name
    def testNumXForms_1(self):
        self._testNumXForms(1)

    @print_test_name
    def testNumXForms_2(self):
        self._testNumXForms(2)

    @print_test_name
    def testNumXForms_3(self):
        self._testNumXForms(3)

    @print_test_name
    def testNumXForms_4(self):
        self._testNumXForms(4)

    @print_test_name
    def testNumXForms_5(self):
        self._testNumXForms(5)

    @print_test_name
    def testNumXForms_6(self):
        self._testNumXForms(6)

    @print_test_name
    def testNumXForms_7(self):
        self._testNumXForms(7)

    @print_test_name
    def testNumXForms_8(self):
        self._testNumXForms(8)

    @print_test_name
    def testNumXForms_9(self):
        self._testNumXForms(9)

    @print_test_name
    def testNumXForms_10(self):
        self._testNumXForms(10)
